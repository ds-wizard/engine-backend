name: Build (cloud)

on:
  push:
  schedule:
  - cron: '0 2 * * *'

jobs:
  btp:
    name: Build-Tag-Push
    runs-on: ubuntu-20.04

    if: github.repository == 'ds-wizard/engine-backend'

    strategy:
      matrix:
        component: [registry, wizard]
        stack: [2.9.1]
    
    env:
      COMPONENT: ${{ matrix.component }}
      PUBLIC_IMAGE: datastewardshipwizard/${{ matrix.component }}-server
      PRIVATE_IMAGE: ${{ secrets.PRIVATE_REGISTRY_URL }}/${{ matrix.component }}-server
      TAG_DEVELOP: develop
      TAG_LATEST: latest
      STACK_VERSION: ${{ matrix.stack }}
      GHC_OPTIONS: -O0 -fwarn-unused-imports -fno-warn-warnings-deprecations

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
        - 5432:5432
        options: --name postgres
      minio:
        image: fclairamb/minio-github-actions
        ports:
          - 9000:9000
        options: --name minio

    steps:
    - name: Detect force push
      if: github.event_name == 'push' && github.event.forced
      run: echo "Force push detected. Cache may be invalidated..."

    - name: Checkout git repository
      uses: actions/checkout@v3

    - name: Fetch all git history
      run: |
        git fetch --prune --unshallow
    
    - name: Prepare ~/.local/bin
      run: |
        mkdir -p ~/.local/bin
        export PATH=~/.local/bin:$PATH

# (1) -> Setup cache
    - name: Cache ~/.stack
      id: cache-stack
      uses: actions/cache@v3
      with:
        path: ~/.stack
        key: stack-home-ubuntu18-${{ hashFiles('**/package.yaml')}}-${{ hashFiles('**/stack.yaml*') }}
        restore-keys: |
          stack-home-ubuntu18-
    
    - name: Cache postgresql-migration
      id: cache-postgresql-migration
      uses: actions/cache@v3
      with:
        path: vendor/postgresql-migration/.stack-work
        key: postgresql-migration-ubuntu18-${{ hashFiles('vendor/postgresql-migration/package.yaml')}}-${{ hashFiles('vendor/postgresql-migration/**/*.hs') }}
        restore-keys: |
          postgresql-migration-ubuntu18-${{ hashFiles('vendor/postgresql-migration/package.yaml')}}-
          postgresql-migration-ubuntu18-

    - name: Invalidate postgresql-migration cache (force push)
      id: invalidate-cache-postgresql-migration
      if: github.event_name == 'push' && github.event.forced && steps.cache-postgresql-migration.outputs.cache-hit != 'true'
      run: |
        rm -rf vendor/postgresql-migration/.stack-work

    - name: Cache servant-errors
      id: cache-servant-errors
      uses: actions/cache@v3
      with:
        path: vendor/servant-errors/.stack-work
        key: servant-errors-ubuntu18-${{ hashFiles('vendor/servant-errors/package.yaml')}}-${{ hashFiles('vendor/servant-errors/**/*.hs') }}
        restore-keys: |
          servant-errors-ubuntu18-${{ hashFiles('vendor/servant-errors/package.yaml')}}-
          servant-errors-ubuntu18-

    - name: Invalidate servant-errors cache (force push)
      id: invalidate-cache-servant-errors
      if: github.event_name == 'push' && github.event.forced && steps.cache-servant-errors.outputs.cache-hit != 'true'
      run: |
        rm -rf vendor/servant-errors/.stack-work

    - name: Cache engine-shared
      id: cache-engine-shared
      uses: actions/cache@v3
      with:
        path: engine-shared/.stack-work
        key: engine-shared-ubuntu18-${{ hashFiles('engine-shared/package.yaml')}}-${{ hashFiles('engine-shared/**/*.hs') }}
        restore-keys: |
          engine-shared-ubuntu18-${{ hashFiles('engine-shared/package.yaml')}}-
          engine-shared-ubuntu18-
    
    - name: Invalidate engine-shared cache (force push)
      id: invalidate-cache-engine-shared
      if: github.event_name == 'push' && github.event.forced && steps.cache-engine-shared.outputs.cache-hit != 'true'
      run: |
        rm -rf engine-shared/.stack-work

    - name: Cache engine-registry
      id: cache-engine-registry
      uses: actions/cache@v3
      with:
        path: engine-registry/.stack-work
        key: engine-registry-${{ matrix.component }}-ubuntu18-${{ hashFiles('engine-registry/package.yaml')}}-${{ hashFiles('engine-registry/**/*.hs') }}
        restore-keys: |
          engine-registry-${{ matrix.component }}-ubuntu18-${{ hashFiles('engine-registry/package.yaml')}}-
          engine-registry-${{ matrix.component }}-ubuntu18-
    
    - name: Invalidate engine-registry cache (force push)
      id: invalidate-cache-engine-registry
      if: github.event_name == 'push' && github.event.forced && steps.cache-engine-registry.outputs.cache-hit != 'true'
      run: |
        rm -rf engine-registry/.stack-work
    
    - name: Cache engine-wizard
      id: cache-engine-wizard
      uses: actions/cache@v3
      if: matrix.component == 'wizard'
      with:
        path: engine-wizard/.stack-work
        key: engine-wizard-${{ matrix.component }}-ubuntu18-${{ hashFiles('engine-wizard/package.yaml')}}-${{ hashFiles('engine-wizard/**/*.hs') }}
        restore-keys: |
          engine-wizard-${{ matrix.component }}-ubuntu18-${{ hashFiles('engine-wizard/package.yaml')}}-
          engine-wizard-${{ matrix.component }}-ubuntu18-
    
    - name: Invalidate engine-wizard cache (force push)
      id: invalidate-cache-engine-wizard
      if: github.event_name == 'push' && github.event.forced && steps.cache-engine-wizard.outputs.cache-hit != 'true'
      run: |
        rm -rf engine-wizard/.stack-work
    
    - name: Cache engine-wizard-metamodel-migrator
      id: cache-engine-wizard-metamodel-migrator
      uses: actions/cache@v3
      if: matrix.component == 'wizard'
      with:
        path: engine-wizard-metamodel-migrator/.stack-work
        key: engine-wizard-metamodel-migrator-${{ matrix.component }}-ubuntu18-${{ hashFiles('engine-wizard-metamodel-migrator/package.yaml')}}-${{ hashFiles('engine-wizard-metamodel-migrator/**/*.hs') }}
        restore-keys: |
          engine-wizard-metamodel-migrator-${{ matrix.component }}-ubuntu18-${{ hashFiles('engine-wizard-metamodel-migrator/package.yaml')}}-
          engine-wizard-metamodel-migrator-${{ matrix.component }}-ubuntu18-
    
    - name: Invalidate engine-wizard-metamodel-migrator cache (force push)
      id: invalidate-cache-engine-wizard-metamodel-migrator
      if: github.event_name == 'push' && github.event.forced && steps.cache-engine-wizard-metamodel-migrator.outputs.cache-hit != 'true'
      run: |
        rm -rf engine-wizard-metamodel-migrator/.stack-work
    
    - name: Cache Stack in ~/.local/bin
      id: cache-stack-local-bin
      uses: actions/cache@v3
      with:
        path: ~/.local/bin
        key: stack-local-bin-ubuntu18-${{ matrix.stack }}

# (2) -> Prepare and install dependencies     
    - name: Setup stack
      if: steps.cache-stack-local-bin.outputs.cache-hit != 'true'
      run: |
        curl -L https://github.com/commercialhaskell/stack/releases/download/v$STACK_VERSION/stack-$STACK_VERSION-linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack';
        
    - name: Update config and build info
      run: |
        ./scripts/update-file-timestamps.sh
        ./scripts/expand-example-files.sh
        ./scripts/generate-build-info.sh engine-$COMPONENT

    - name: Install GHC and dependencies
      run: |
        stack build -j3 --no-terminal --install-ghc --test --only-dependencies --ghc-options="$GHC_OPTIONS"
        
# (3) -> Build binary
    - name: Build and test application 
      run: |
        stack build -j3 engine-$COMPONENT --no-terminal --skip-ghc-check --ghc-options="$GHC_OPTIONS" 2>&1 | tee log.txt
        WARNINGS=$(grep -o ': warning: ' log.txt | wc -l)
        if [ $WARNINGS -gt "0" ]; then
          echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
          echo "!! GHC WARNINGS DETECTED ($WARNINGS):"
          grep ': warning: ' -A 3 log.txt
          echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
          exit 1
        fi
        stack build -j3 engine-$COMPONENT --no-terminal --skip-ghc-check --test --ghc-options="$GHC_OPTIONS"
        cp $(stack path --local-install-root)/bin/engine-$COMPONENT engine-$COMPONENT/engine-$COMPONENT-bin
      env:
        FEEDBACK_TOKEN: ${{ secrets.FEEDBACK_TOKEN }}

# (4) -> Docker login
    - name: Docker login
      run: |
        docker login -u "$DOCKER_HUB_USERNAME" -p "$DOCKER_HUB_PASSWORD"
        docker login -u "$PRIVATE_REGISTRY_USERNAME" -p "$PRIVATE_REGISTRY_PASSWORD" "$PRIVATE_REGISTRY_URL"
      env:
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        PRIVATE_REGISTRY_URL: ${{ secrets.PRIVATE_REGISTRY_URL }}
        PRIVATE_REGISTRY_USERNAME: ${{ secrets.PRIVATE_REGISTRY_USERNAME }}
        PRIVATE_REGISTRY_PASSWORD: ${{ secrets.PRIVATE_REGISTRY_PASSWORD }}

# (5) -> Build Docker image
    - name: Docker build
      run: |
        cd engine-$COMPONENT
        docker build -t $PRIVATE_IMAGE:$GITHUB_SHA .

    - name: Docker tag and push - branch (private)
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/') && !contains(github.ref, 'release')
      run: |
        GITHUB_BRANCH=`echo $GITHUB_REF | cut -d/ -f3- | sed 's#/#-#g'`
        docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $PRIVATE_IMAGE:$GITHUB_BRANCH
        docker push $PRIVATE_IMAGE:$GITHUB_BRANCH

    - name: Docker tag and push - latest (public)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $PUBLIC_IMAGE:$TAG_LATEST
        docker push $PUBLIC_IMAGE:$TAG_LATEST

    - name: Docker tag and push - version tag (public)
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: |
        GITHUB_TAG=`echo $GITHUB_REF | cut -d/ -f3` 
        # Release vX.Y.Z
        if [[ $GITHUB_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          IMAGE_TAG_MAJOR="$PUBLIC_IMAGE:"`echo $GITHUB_TAG | sed -E "s/v(.*)\..*\..*/\1/g"`
          IMAGE_TAG_MINOR="$PUBLIC_IMAGE:"`echo $GITHUB_TAG | sed -E "s/v(.*)\..*/\1/g"`
          IMAGE_TAG_PATCH="$PUBLIC_IMAGE:"`echo $GITHUB_TAG | sed -E "s/v//g"`
          echo "Publishing release: $IMAGE_TAG_PATCH";
          docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $IMAGE_TAG_MAJOR && docker push $IMAGE_TAG_MAJOR;
          docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $IMAGE_TAG_MINOR && docker push $IMAGE_TAG_MINOR;
          docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $IMAGE_TAG_PATCH && docker push $IMAGE_TAG_PATCH;
        fi
        # Release candidate vX.Y.Z-rc.R
        if [[ $GITHUB_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+$ ]]; then
          IMAGE_TAG_RC="$PUBLIC_IMAGE:"`echo $GITHUB_TAG | sed -E "s/v//g"`
          echo "Publishing release candidate: $IMAGE_TAG_RC";
          docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $IMAGE_TAG_RC && docker push $IMAGE_TAG_RC;
        fi
