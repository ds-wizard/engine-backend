name: Engine Backend CI

on:
  push:
  pull_request:

jobs:
  btp:
    name: Build-Tag-Push
    runs-on: ubuntu-16.04
    
    strategy:
      matrix:
        component: [registry, wizard]
        stack: [2.1.3]
    
    env:
      COMPONENT: ${{ matrix.component }}
      PUBLIC_IMAGE: datastewardshipwizard/${{ matrix.component }}-server
      PRIVATE_IMAGE: ${{ secrets.PRIVATE_REGISTRY_URL }}/${{ matrix.component }}-server
      TAG_DEVELOP: develop
      TAG_LATEST: latest
      STACK_VERSON: ${{ matrix.stack }}

    services:
      mongo:
        image: mongo:4.2.3
        ports: 
        - 27017:27017
        options: --name mongo

    steps:
    - uses: actions/checkout@v2
    
    - name: Prepare ~/.local/bin
      run: |
        mkdir -p ~/.local/bin
        export PATH=~/.local/bin:$PATH

# (1) -> Setup cache
    - name: Cache ~/.stack
      id: cache-stack
      uses: actions/cache@v1
      with:
        path: ~/.stack
        key: stack-home-${{ matrix.component }}-ubuntu16-${{ hashFiles('**/stack.yaml.lock') }}
        restore-keys: |
          stack-home-${{ matrix.component }}-ubuntu16
    
    - name: Cache .stack-work
      id: cache-stack-work
      uses: actions/cache@v1
      with:
        path: .stack-work
        key: stack-work-${{ matrix.component }}-ubuntu16-${{ hashFiles('**/stack.yaml.lock') }}
        restore-keys: |
          stack-work-${{ matrix.component }}-ubuntu16
    
    - name: Cache bson-generic
      id: cache-bson-generic
      uses: actions/cache@v1
      with:
        path: vendor/bson-generic/.stack-work
        key: bson-generic-ubuntu16-${{ hashFiles('vendor/bson-generic/**/*') }}
        restore-keys: |
          bson-generic-ubuntu16
    
    - name: Cache mongoDB-migration
      id: cache-mongoDB-migration
      uses: actions/cache@v1
      with:
        path: vendor/mongoDB-migration/.stack-work
        key: mongoDB-migration-ubuntu16-${{ hashFiles('vendor/mongoDB-migration/**/*') }}
        restore-keys: |
          mongoDB-migration-ubuntu16
    
    - name: Cache engine-registry
      id: cache-engine-registry
      uses: actions/cache@v1
      if: matrix.component == 'registry'
      with:
        path: engine-registry/.stack-work
        key: engine-registry-${{ matrix.component }}-ubuntu16-${{ hashFiles('engine-registry/**/*') }}
        restore-keys: |
          engine-registry-${{ matrix.component }}-ubuntu16
    
    - name: Cache engine-shared
      id: cache-engine-shared
      uses: actions/cache@v1
      with:
        path: engine-shared/.stack-work
        key: engine-shared-ubuntu16-${{ hashFiles('engine-shared/**/*') }}
        restore-keys: |
          engine-shared-ubuntu16
    
    - name: Cache engine-wizard
      id: cache-engine-wizard
      uses: actions/cache@v1
      if: matrix.component == 'wizard'
      with:
        path: engine-wizard/.stack-work
        key: engine-wizard-${{ matrix.component }}-ubuntu16-${{ hashFiles('engine-wizard/**/*') }}
        restore-keys: |
          engine-wizard-${{ matrix.component }}-ubuntu16
    
    - name: Cache engine-wizard-metamodel-migrator
      id: cache-engine-wizard-metamodel-migrator
      uses: actions/cache@v1
      if: matrix.component == 'wizard'
      with:
        path: engine-wizard-metamodel-migrator/.stack-work
        key: engine-wizard-metamodel-migrator-${{ matrix.component }}-ubuntu16-${{ hashFiles('engine-wizard-metamodel-migrator/**/*') }}
        restore-keys: |
          engine-wizard-metamodel-migrator-${{ matrix.component }}-ubuntu16
    
    - name: Cache Stack in ~/.local/bin
      id: cache-stack-local-bin
      uses: actions/cache@v1
      with:
        path: ~/.local/bin
        key: stack-local-bin-${{ matrix.stack }}-ubuntu16

# (2) -> Prepare and install dependencies     
    - name: Setup stack
      if: steps.cache-stack-local-bin.outputs.cache-hit != 'true'
      run: |
        curl -L https://github.com/commercialhaskell/stack/releases/download/v$STACK_VERSON/stack-$STACK_VERSON-linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack';
        
    - name: Update config and build info
      run: |
        ./scripts/update-file-timestamps.sh
        ./scripts/expand-example-files.sh
        ./scripts/generate-build-info.sh engine-$COMPONENT

    - name: Install GHC and dependencies
      run: |
        stack build engine-$COMPONENT --no-terminal --install-ghc --test --only-dependencies
        
# (3) -> Build binary
    - name: Build and test application 
      run: |
        stack build engine-$COMPONENT --no-terminal --skip-ghc-check --test
        cp $(stack path --local-install-root)/bin/engine-$COMPONENT engine-$COMPONENT/engine-$COMPONENT-bin
      env:
        FEEDBACK_TOKEN: ${{ secrets.FEEDBACK_TOKEN }}

# (4) -> Build Docker image
    - name: Docker build
      run: |
        cd engine-$COMPONENT
        docker pull $PUBLIC_IMAGE:$TAG_DEVELOP
        docker build --cache-from $PUBLIC_IMAGE:$TAG_DEVELOP -t $PRIVATE_IMAGE:$GITHUB_SHA .

# (5) -> Docker image tagging
    - name: Docker login
      if: github.event_name == 'push'
      run: |
        docker login -u "$DOCKER_HUB_USERNAME" -p "$DOCKER_HUB_PASSWORD"
        docker login -u "$PRIVATE_REGISTRY_USERNAME" -p "$PRIVATE_REGISTRY_PASSWORD" "$PRIVATE_REGISTRY_URL"
      env:
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        PRIVATE_REGISTRY_URL: ${{ secrets.PRIVATE_REGISTRY_URL }}
        PRIVATE_REGISTRY_USERNAME: ${{ secrets.PRIVATE_REGISTRY_USERNAME }}
        PRIVATE_REGISTRY_PASSWORD: ${{ secrets.PRIVATE_REGISTRY_PASSWORD }}

    - name: Docker push - commit SHA (private)
      if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')
      run: |
        docker push $PRIVATE_IMAGE:$GITHUB_SHA

    - name: Docker tag and push - branch (private)
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/') && !contains(github.ref, 'release')
      run: |
        GITHUB_BRANCH=`echo $GITHUB_REF | cut -d/ -f3- | sed 's#/#-#g'`
        docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $PRIVATE_IMAGE:$GITHUB_BRANCH
        docker push $PRIVATE_IMAGE:$GITHUB_BRANCH

    - name: Docker tag and push - develop (public)
      if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
      run: |
        docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $PUBLIC_IMAGE:$TAG_DEVELOP
        docker push $PUBLIC_IMAGE:$TAG_DEVELOP

    - name: Docker tag and push - latest (public)
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: |
        docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $PUBLIC_IMAGE:$TAG_LATEST
        docker push $PUBLIC_IMAGE:$TAG_LATEST

    - name: Docker tag and push - version tag (public)
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: |
        GITHUB_TAG=`echo $GITHUB_REF | cut -d/ -f3` 
        # Release vX.Y.Z
        if [[ $GITHUB_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          IMAGE_TAG_MAJOR="$PUBLIC_IMAGE:"`echo $GITHUB_TAG | sed -E "s/v(.*)\..*\..*/\1/g"`
          IMAGE_TAG_MINOR="$PUBLIC_IMAGE:"`echo $GITHUB_TAG | sed -E "s/v(.*)\..*/\1/g"`
          IMAGE_TAG_PATCH="$PUBLIC_IMAGE:"`echo $GITHUB_TAG | sed -E "s/v//g"`
          echo "Publishing release: $IMAGE_TAG_PATCH";
          docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $IMAGE_TAG_MAJOR && docker push $IMAGE_TAG_MAJOR;
          docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $IMAGE_TAG_MINOR && docker push $IMAGE_TAG_MINOR;
          docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $IMAGE_TAG_PATCH && docker push $IMAGE_TAG_PATCH;
        fi
        # Release candidate vX.Y.Z-rc.R
        if [[ $GITHUB_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+$ ]]; then
          IMAGE_TAG_RC="$PUBLIC_IMAGE:"`echo $GITHUB_TAG | sed -E "s/v//g"`
          echo "Publishing release candidate: $IMAGE_TAG_RC";
          docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $IMAGE_TAG_RC && docker push $IMAGE_TAG_RC;
        fi
